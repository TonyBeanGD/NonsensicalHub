/*-----------------本节课内容------------------------------
  流程控制语句 --- 条件判断语句
    1、简单语句和复合语句 
	2、流程控制语句的意义
	3、if判断语句
	4、switch分支语句
-----------------------------------------------------------
回顾：
    表达式和语句 --- expression
       A、表达式一种有值的语法结构，它由运算符将变量、常量等结合而成。
	   B、语句: 
	      1)、表达式语句：以分号结尾的一行代码，表达式+分号语句。
	      2)、由语句定义符给出的语句。
		  
一、简单语句复合语句
	1、什么是语句？
			 程序执行的基本单位，常见语句由表达式、分号、语句定义符等构成。
		按照解决问题的流程，将语句组织起来，就形成了程序，也即：程序由语句组成。
		
		C++语言中，语句一般分为 5 类 ：
			 A、 表达式语句 
					 表达式 + 分号，比如：int a = 0;
				 
			 B、 流程控制语句 
					 由语句定义符给出的语句，通过他们，可以改变和控制程序执行流程。
				 
			 C、 复合语句 
					 由{}花括号括起来的语句序列，称为复合语句，也被成为语句块 或 代码块。
					 复合语句可以被视为一个独立的单元，可以出现在程序中任何单个语句可以出现的地方。
				 
			 D、 空语句
				 ;	 //只有一个分号
				 
			 E、 函数调用语句
				printf("hello world\n");	 
	 
	    注意：
			A、并不是所有语句都要求 以分号结尾;
			B、除复合语句外，其他语句都要求以分号结尾。

    2、变量作用域初识
	    A、代码块作用域：一对{}花括号，所包含的区域。
	    B、变量的生命周期(可用范围)为 定义该变量的语句，所在的作用域。
		   在变量作用域外，无法使用/访问该变量。
		   
二、流程控制语句的意义
		经过前人的总结，复杂逻辑问题的解决过程，总是可由如下 控制结构 形容。
			A、顺序结构
			   程序的总体执行顺序是自上而下，依次执行。
			   
			B、选择结构
			   根据判断条件的结果，来选择执行一些过程。
			   
			C、循环结构
			   根据判断条件的结果，循环执行一些过程。当条件为假时，不再执行这些过程。
 
        举例：游戏的登录过程 --- 选择服务器/登录帐号/选择人物/开始游戏
		      编程的学习过程等。
		
        对应上述结论，程序中定义了相应的语句与之对应。
			A、顺序结构	
			   程序入口为main函数，从上而下，依次执行出现的语句。
			  
			B、选择结构
			   定义了条件判断语句/转向语句来实现，if/switch和break/contiue/goto等

			C、循环结构
			   定义了循环语句来实现，while/do...while/for和break/contiue/goto等

	    其中，实现选择结构和循环结构的语句，我们称为流程控制语句。
	    
        结论：
		    A、流程控制语句的是 使用程序解决复杂问题的基础。
		    B、在所有的编程语句中，都存在流程控制语句的概念。
		
三、if判断语句	
	1、简单的if语句	
		A、if判断语句的形式
			   if(表达式)
			   语句;
			   或------------------
			   if(表达式)
				{
				 ...;
				} //复合语句
		B、意义
		   if语句根据特定表达式是否为真来判断是否执行语句。   
		   具体：如果表达式为真，则执行语句或语句块;为假，则执行if语句的下一句。
		  
		C、注意事项 -- 后续同
		   A、if关键词只为表达式，且需要用()括号括起来。
		   B、if(表达式)后，只有一条语句，也建议使用{}括住。
		   C、表达式的值为非0 或 true时，即为真
			  表达值的值为0 或 false时，即为假。

		D、使用实例
		   1)、细化游戏登录逻辑	
		   2)、判断两个数的大小
		   3)、可简写为三目运算符
		   4)、....
		   
	2、带else的if语句
        if语句带有else的形式，可以做出如果判断条件为假时，程序的处理过程。
		A、形式
			   if(表达式) 
				  语句1;
			   else
				  语句2;
			  
			或
				if(表达式) 
				  {语句块1;} //复合语句1
				else
				  {语句块2;} //复合语句2
				  
	    B、意义
		    如果表达式为真，则执行语句1或语句块1；如果为假，则执行语句2或语句块2.
	
	3、if语句的嵌套
	    if语句可以嵌套使用，实现连续判断。
	    A、形式
			  if(表达式1)
			  {
				 语句1;
			  }
			  else if(表达式2)
			  {
				 语句2;
			  }
			  else if(表达式3)
			  {
				 语句3;
			  }
			  ...
			  else
			  {
				 语句n;
			  }
	   
		B、意义
		     如果表达式1为真，则执行语句1；
			 如果表达式1为假，则继续判断表达式2是否真，
			
			 如果表达式2为真，则执行语句2，
			 如果表达式2为假，则继续判断表达式3是否真；
				
			 如果表达式3为真，则执行语句3，
			 如果表达式3为假，则继续判断表达式4是否真；
			 
	         ...
			 
			 如果表达式n-1为真，则执行语句n-1，
			 如果表达式n-1为假，则执行语句n。
			
	    C、重要注意：
		         为了避免二义性，C++语言规定：
		    else总是与它前面最接近的if配对，所以好的习惯是每个判断的语句块都用{}括起来。
			   
三、switch分支语句	
    switch语句：又称为分支选择语句，它提供了一种更方便的方法来实现深层嵌套的if、else逻辑。

    A、形式
		switch(表达式)	
	   {
		case 常量表达式1:
			  语句1;
		case 常量表达式2:
			  语句2;
		...
		
		case 常量表达式n:
			  语句n;
			  
		default :
			  语句n+1;
	   }
	   
    B、意义
	   switch语句，先计算表达式的值，然后逐个与其后的常量表达式的值相比较。
	   当表达式的值与某个常量表达式的值相等时，即执行其后的语句。
	   如果表达式的值与所有case后的常量表达式均不相同时，则执行default后的语句。
	  
    C、举例：
        根据输入的数字，给出对应的星期。
		
	D、使用注意：
	   1)、在case后的各常量表达式的值 不能相同，否则会出现错误；
	   2)、在case后，允许有多个语句，可以不同{}括起来；
	   3)、各case和default子语句的先后顺序可以变动；
	   4)、default子句可以省略。

    E、特殊使用
	   结合转向语句：break; 使用，break的意义为：跳出当前语句的执行，下一条语句的执行。
	   
	   witch(表达式)	
	   {
		case 常量表达式1:
			 {
			   语句块1;
			 }
			 break;      
		...
		
		case 常量表达式n:
			 {
			   语句块n;
			 }
			 break; 
			  
		default :
			  语句n+1;
	   }
*/
 