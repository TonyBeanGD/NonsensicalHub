/*-----------------本节课内容--------------------------------
    string类 --- 抽象数据类型/ADT ---- 定义于C++标准函数库  --- 字符容器
	1、标准库string类型 ---------- 掌握使用
	2、string类的编写  ----------- 熟练
-----------------------------------------------------------
回顾与引言：
    在C++基础和C++OOP阶段，分别使用 字符串数组 和 字符串类 来表达和使用"字符串"这种数据类型。
	
	A、字符串数组，通过字符数组的存储和逻辑结构特点，体现了字符串，字符串的运算则是通过函数进行描述。
	B、字符串类，基于已有基本数据类型char，经过抽象，将字符串的存储结构 和 其运算，分别通过类的属性
	和行为进行了描述，定义了 自己的字符串数据类型。 --- 字符串类 
	
	在实际OOP程序设计中，显然，需要经常使用字符串类 在程序中表达和使用 生活或游戏中的字符串，
	但目前 字符串数组和字符串操作函数 、以及自定义的字符串类，使用起来并不简单易用，
	或者说如果其有一套标准化的商业强度的字符串类实现，或者会更好？
	
	答案：在C++ 标准库函数中，提供了丰富了抽象数据类型标准库，其中包含了字符串类 ---- string类
	      字符串类，也被称为字符容器。
		  
	提示：基于已有的数据类型，根据需要进行抽象，形成了一个数据模型及定义在该模型上的一组操作，此过程称为定义了
		  一个抽象数据类型（Abstruct Data Type，简称ADT）。 --- 数据模型 + 操作 = ADT /属性+行为 = 类

一、标准库string类型
    
1、string类型 --- C++标准库的string类
   理解：
	 A、string类型支持长度可变的字符串，C++标准库的string类，负责管理和存储字符相关的内存，以及提供各种有用的操作。
	 B、string类用来满足C++ OOP编程中，对字符串的一般应用。
	 C、string类是字符容器，也有拥有容器的一般操作，特别是迭代器相关的内容。
	 
2、string类的使用
		和其他的标准库类型一样，使用string类型对象，需要包含相关的头文件，以及提供合适的using声明
		(string类定义在标准命名空间内)。
		
		#include <string>
		using std::string; //using namespace std;

	从下面几个方面进行和说明：
		A、string对象定义和初始化
		B、string对象的读写
		C、string对象的操作函数
		D、对string对象中单个字符进行操作
	
====A、string类的定义和初始化
      1)、string str1;              //定义一个空串，默认构造函数
	  2)、string str2(str1)；       //将str2初始化为s1的一个副本
      3)、string str3("MyString")； //将str3初始化为一个字符串字面值副本
	  4)、string str4(n,'g');       //将str4初始化为字符'g'的n个副本
	  
	  注意：1、"MyString"是字符串常量，str3是拥有"MyString"字符串信息的字符串对象，即其字面值。
	        2、string str = "often test"; 符合一般思考，本质是对字符串对象str赋值，非初始化。
			   //string str;
			   //str =  "often test";
               
====B、string对象的读写
		1、string对象的基本读写
		  类似基本数据类型，可以基于iostream和string标准库，使用标准输入输出操作符来读写string对象。
		  
			eg: string str1;
				cin>>str1; // 
				cout<<str1;
			
			注意：string类型的输入操作符
				  1)、读取并忽略开头所有的空白字符(如：空格、换行符、制表符)  === === 注意重要
				  2)、读取字符直至再次遇到空白字符，读取终止   === 注意重要
				  3)、输入/输出操作符的运算结果为左操作数，故我们可以把多个读操作或写操作放在一起。
				  
				  eg: string str1,str2;
					  cin>>str1>>str2； // cin>>str2
					  cout<<str1<<str2;
				  
		2、string对象用于 读入未知数目的字符 ---------- 文件尾或遇到空白符
		   string NoSureStr1;
		   cin>>NoSureStr1; 
		   
		   while(cin>>NoSureStr1) //重写读入到NoSureStr1
		   {
			   cout<<word<<endl;
		   }
			用输入操作符来读取string对象，该操作符返回所读的istream对象，
			并在结束后，作为while的循环的判断条件。
			在未达到文件尾且未遇到无效输入时，操作符返回的输入流是有效、非空的。	
        
		3、string对象用于getline函数读取整行文本   ---- 遇到换行符 --- 和上面对比
		   getline函数：与string相关的IO操作，函数接受两个参数：输入流对象和一个string对象
		   功能：从输入流的下一行读取，并保存读取的内容到string对象，但不包含换行符。
		   
		   注意：1、getline函数，不忽略行开头的换行符，即：遇到下一个换行符，读取停止结束。
				 2、当第一个字符为换行符时，string对象被置为空。
				 3、getline函数在返回值丢弃换行符，换行符不会存储在string对象中
				 
			string line;
			while(getline(cin,line))
			{cout<<line<<endl;};
	 
====C、string对象的操作
       sring对象常见的操作，包含string类的成员函数或操作符重载
	   1、str.empty();     	 //如果str为空，则返回true,否则返回false
	   2、str.size();      	 //返回str中字符的个数  //字符串常量赋值给string对象时，不会自动加\0
	   3、str[n];         	 //返回str中位置为n的字符，位置从0计数
       4、str1+str2;      	 //把str1和str2连接成一个新字符串，返回新生成的string对象  
	   5、str1=str2;      	 //把str1内容替换为str2的副本，
	   6、str1==str2；     	 //比较str1和str2的内容，相等返回true，否则false
	   7、!=、<、>、>=、<=   //保持原有字符串惯有的含义
	   
	   "对应"注意：
	    2、任何存储string的size操作结果的变量必须是string::size_type类型，它保证能装下string的字符个数。
		    特别注意不要把size的返回值赋值给一个int变量，很有可能被爆掉/溢出。  === 重要
	   	                         						 
	    3、标准库不检查下标索引值，下标越界是未定义的，越界后可能会导致严重的程序错误。
		   string索引的实际数据类型是string::size_type，虽然整型表达式可以作为下标操作符索引值，但不建议。
		   eg:[]遍历字符串string对象
		   
		4、string连接 +
		   当进行string对象和字符串字面值混合连接操作时，+操作符的左右操作符必须至少一个是string类型的。 ==注意
		
      6\7、string关系操作符:  按照字典排序。 //cstring //string.h ---字符串操作函数
	       特别：字母相同时，小写字母大于大写字母
           特别：长度不一致时，且长string都从头依次包含短string，短string小于长string。
		   
====D、对string对象中单个字符进行操作
       在string对象使用中，很可能需要对string对象中单个字符进行处理。
	   此时可以结合string对象的下标操作等，以及 C++标准库中已提供一系列单个字符相关的函数，来完成功能要求。
	   
	   单个字符操作函数，在cctype头文件中定义，具体如下:
	   1、isalnum(c);             //如果字符c是字母或数组，则为true //alphabet //number
	   2、isalpha(c);             //如果字符c是字母，则为true       //alphabet
       3、iscntrl(c);             //如果字符c是控制字符，则为true       //control
       4、isdigit(c);             //如果字符c是数字，则为true           //digit
       5、isgraph(c);             //如果字符c不是空格，但可打印，则为true       //graph   
	   ......
	   6、isupper(c);             //如果字符c是大写字母，返回true
	   7、islower(c);             //如果字符c是小写字母，返回true
	   8、tolower(c);             //如果字符c是大写字母，返回其小写字母，否则返回c
	   9、toupper(c);             //如果字符c是小写字母，返回其大写字母，否则返回
      10、isspace(c);             //如果字符c是空白字符，返回true	 

    //字符串的格式化
	char tmp[1024] = { 0 };
	int a = 17;
	sprintf(tmp, "xiaohong%d.png", a);

    
二、string类的编写
    见PPT课件19～38。  
*/