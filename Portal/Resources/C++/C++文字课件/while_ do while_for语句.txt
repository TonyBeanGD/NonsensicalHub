/*-----------------本节课内容------------------------------
  流程控制语句 --- 循环语句
    1、while语句 和 do...while语句
	2、转移语句
	3、for语句
	4、循环语句与转移语句
-----------------------------------------------------------
回顾：
       程序的三种基本逻辑结构：顺序结构、选择结构、循环结构，他们构成了复杂问题的处理逻辑。
	嵌套使用它们，可以构建具有复杂层次的“结构化程序”。
	   三种结构简单描述如下：
		A、顺序结构
			    顺序结构表示程序中的各操作是按照它们出现的先后顺序执行的。
		   
		B、选择结构
			    选择结构表示程序的处理步骤出现了分支，它需要根据某一特定的条件选择其中的
			一个分支执行。选择结构有单选择、双选择和多选择三种形式。
			
        C、循环结构
		         程序反复执行某个或某些操作，直到某条件为假（或为真）时才可终止循环。
			循环结构的基本形式有两种：当型循环和直到型循环。
			
一、while语句 和 do...while语句
	1、while语句 --- 当型循环
		A、形式
			 while语句是最常见的循环语句，其标准形式如下：
			   while(条件表达式)
			   {
				   语句;
			   }
			    
			其中，称"{语句}"为循环体,条件表达式为 循环条件。
	   
		B、含义：当条件表达式的值为真时，while语句反复执行 循环体内的语句，直至条件为假，程序跳出循环(终止循环)，执行下一条语句。
	        举例：依次输出10以内的数字。
	   
	    C、语句的使用
		   当循环体内无改变 条件表达式真假 的因子，程序始终执行循环体，无法结束。称这种循环为死循环。
		   ～～避免死循环，循环体内有改变条件表达式的因子。
		
		D、while语句使用注意事项
		   1)、while语句中的表达式一般是关系表达式或逻辑表达式，只要表达式的值为真(非0)即可继续循环。
		   2)、循环体如包括有一个以上的语句，必须用{}括起来，组成复合语句
		   3)、应注意循环条件的选择，避免死循环
		   4)、允许while语句的循环体中包含其他while语句，从而形成双重循环 或 多重循环。
		   
    2、do...while语句 --- 直到新循环
	    A、形式
		   do
		   {
			  语句;
		   }while(条件表达式);
		   
		B、含义
		   执行一次循环体后，判断条件表达式是否为真，为真则继续执行循环体，为假，则跳出循环(终止循环)，执行执行下一条语句。
		   
		C、语句的使用
		   注意死循环;无论条件表达式是否为真，语句一定会被执行一次。
		   
		D、使用注意事项
	       1)、在do...while语句的条件表达式后必须加分号，if/while语句后可以不加
		   2)、do..while语句也可以组成多重循环，而且可以和while语句相互嵌套。
		   3)、当do和while之间的循环体由多个语句组成时，必须用{}括起来，组成一个复合语句。
		   4)、do...while语句和while语句可相互替换，注意修改循环控制语句。
		   
	3、两者的区别
	    A、do_while语句和while语句的区别在于do-while是先执行后判断，故do-while至少要执行一次循环体。
	       而while循环，如果条件不满足，则一次循环体语句也不执行。
		B、while语句和do-while语句一般可以相互改写。其中while更常用，do-while用于特殊情况。
           do
		   {}
           while(0)		   
	
二、转移语句
        在不断执行 循环体的过程中，可能存在 满足某些条件了，需要跳出循环，执行下一条语句的情况。
	比如：跑步刷圈过程，遇到呼吸不畅了，此时就要停止跑步刷圈休息下。
	      程序以一个字符为单位，不断从控制台获取单个字符，当输入的字符为Z时，停止获取，并退出程序。
		  
    上述跳出当前循环语句的需求，就可以通过跳转语句 break;来实现。
	
	在C++中，提供了4中跳转语句。
		1、return; -- 只出现在函数中，用于结束当前函数的调用并返回当前函数需要返回的值
					 后面在"函数"课程中进行详细介绍。
					 
	    2、goto 语句标号; --  也称无条件转移语句，意义：改变程序流程，转去执行语句标号所标识的语句。
					           尽量避免使用。
							   
		3、break; --- 用于switch 或 循环语句中,意义是跳出本层循环，跳转去执行后面的程序。
		
		4、continue; --- 只能用于循环语句，结束本次循环，即不再执行循环体中continue语句之后的语句，
						 转入下一次循环条件的判断与执行。
						 
		注意：本层循环 和 本次循环的 区别。		 
					 
三、for语句		
    for语句是使用最为广泛的循环语句，是一种简化的循环语句。
    1、形式
	    标准形式如下：
			for(表达式1;表达式2;表达式3)
			{
				循环体;
			}
		其中，表达式1：通常用于给循环变量赋初值，一般为赋值表达式；
			  表达式2：通常用于设立循环条件，一般为关系表达式
			  表达式3：用于修改循环变量的值，一般是赋值语句。
		
		四者的执行顺序：
			表达式1 --> 表达式2 --->执行循环体 --->表达式3 --->表达式2为真 ---> 执行循环体 
											   --->表达式3 --->表达式2为真 ---> 执行循环体 
											   --->表达式3 --->表达式2为真 ---> 执行循环体 
												...
											   --->表达式3 --->表达式2为假 ---> 结束for循环
												  （直到表达式2为假，跳出for循环，执行下一条语句。）
		典型使用：执行循环体10次后结束for循环。
			for(int i=0;i<10;i++)
			{
				printf("%d\t",i);
			}
	
    2、使用注意
	    1)、for语句中的各表达式都可以为空，但分号间隔符不能为少。
		2)、使用for循环时，省略表达式2或表达式3，可能会造成死循环。
		    如省略表达式3，可在循环体内包含 改变表达式2 值的因子。
			
		3)、循环体可以是空语句
		4)、for语句可以嵌套使用，构成多重循环。
		    比如：非诚勿扰，M个男的遍历N个女的
		    for(int i = 0;i<10;i++)
			{
				for(int j = 0;j<10;i++)
				{
					printf("%d x %d = %d", i,j,i*j);
				}
			}
			
四、循环语句与转移语句		
	当转移语句与 循环嵌套语句 组合使用时需要特别注意。
	典型：break和continue
	
	 1、while嵌套语句和 break、continue;
	    int i=0;
		while(i<10)
		{
			while(i%2 == 0)
			{
				printf("%d\t",i)
				continue;
				printf("继续往下执行语句1\n");
				printf("继续往下执行语句2\n");
			}
			
			i++;
		}
		
	2、for嵌套语句和 break、continue;
		for(int i = 0;i<10;i++)
		{
			for(int j = 0;j<10;i++)
			{
				printf("%d x %d = %d", i,j,i*j);
				if(24 == i×j)
				{
					break;
				}
				printf("继续往下执行语句1\n");
				printf("继续往下执行语句2\n");
			}
		}
	
*/