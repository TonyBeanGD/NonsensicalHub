Collider组件：
	Collider组件有多重类型，常见的有Box Collider（盒状碰撞器），Sphere Collider（球形碰撞器）
	Edit collider：编辑碰撞器
	Is Trigger：是否是触发器，触发器没有实体
	Material：不知道有什么用
	Center：碰撞体的中点
	Size：碰撞体的大小
	一个物体可以有多个碰撞体
若想触发碰撞器或触发器，有碰撞器或触发器的脚本所挂载的物体一定要加刚体组件
一.碰撞器
	//此方法与Start、Update平级
	void OnCollisionEnter(Collision 【Collision名】)
    	{
        	if (【Collision名】.gameObject.tag == "【tag名】")
        	{
            		Destroy(gameObject);
            		Destroy(【Collision名】.gameObject);
        	}
    	}
////OnCollisionExit
二.触发器
	//此方法与Start、Update平级
	void OnTriggerEnter(Collider 【Collider名】)
    	{
        	if (【Collider名】.tag == "【tag名】")
        	{
            		Destroy(【Collider名】.gameObject);
            		StartCoroutine(【协程名】());
        	}
	}

实例：
//此脚本挂载在想让其碰撞时发生事件的物体上
using UnityEngine;
public class Enemy_Control : MonoBehaviour
{
    	private Rigidbody enemy_rb;	//定义一个用于接受自己刚体的参数
    	GameObject player;	//定义用于接收player的GameObject的参数

    	void OnCollisionEnter(Collision other)	//当挂载物体发生碰撞的时候
    	{
        	if (other.gameObject== player)	//当碰撞到player时，游戏暂停
            	Time.timeScale = 0;
        	else if (other.gameObject.name != "Ground")	//当碰撞到其他name不为“Ground”的GameObject时
        	{
            		if (other.transform.parent != null)			//如果它的父物体不为空
                		Destroy(other.transform.parent.gameObject);	//销毁父物体
            		else							//否则
                		Destroy(other.gameObject.gameObject);		//销毁【other】
        	}
   	}
    	void Start()
    	{
        	player = GameObject.Find("Player");				//寻找场景中名为“Player”的GameObject
        	enemy_rb = transform.GetComponent<Rigidbody>();			//给刚体赋值
    	}

    	void Update()
    	{
        	transform.LookAt(player.transform);				//看向【player】的transform（z轴指向目标位置，y轴与z轴处于同一垂直面）
        	enemy_rb.AddForce(transform.forward * Time.deltaTime * 10);	//移动
    	}
}
